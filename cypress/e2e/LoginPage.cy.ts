import { 
    LOGIN_PAGE_LOGIN_BUTTON_DATA_TEST_ID,
    LOGIN_PAGE_LOGIN_BUTTON_LABEL,
    LOGIN_PAGE_PASSWORD_DATA_TEST_ID,
    LOGIN_PAGE_PASSWORD_LABEL,
    LOGIN_PAGE_PASSWORD_MUST_HAVE_LESS_THAN_MAX_NUMBER_CHARACTERS_ERROR_MESSAGE,
    LOGIN_PAGE_PASSWORD_MUST_HAVE_MORE_THAN_MIN_NUMBER_CHARACTERS_ERROR_MESSAGE,
    LOGIN_PAGE_PASSWORD_MUST_HAVE_NO_SPACE_OR_CHARACTER_ERROR_MESSAGE,
    LOGIN_PAGE_USERNAME_DATA_TEST_ID,
    LOGIN_PAGE_USERNAME_LABEL,
    LOGIN_PAGE_USERNAME_MUST_HAVE_LESS_THAN_MAX_NUMBER_CHARACTERS_ERROR_MESSAGE,
    LOGIN_PAGE_USERNAME_MUST_HAVE_MORE_THAN_MIN_NUMBER_CHARACTERS_ERROR_MESSAGE,
    LOGIN_PAGE_USERNAME_MUST_HAVE_NO_SPACE_OR_CHARACTER_ERROR_MESSAGE,
} from "const"
import { 
    FULL_LOGIN_ROUTER, LOGIN_PAGE_HAVE_SPACE_CHARACTER_USERNAME, LOGIN_PAGE_HAVE_SPECIAL_CHARACTER_USERNAME, LOGIN_PAGE_LESS_THAN_MIN_NUMBER_CHARACTERS_PASSWORD, LOGIN_PAGE_LESS_THAN_MIN_NUMBER_CHARACTERS_USERNAME, LOGIN_PAGE_MORE_THAN_MAX_NUMBER_CHARACTERS_PASSWORD, LOGIN_PAGE_MORE_THAN_MAX_NUMBER_CHARACTERS_USERNAME,
} from "../constants"
import { 
    checkTextExist,
    getComponentExistByDataTestId,
} from "../utils"

describe('Login Page', () => {
    it('should contains the username and password input tags', () => {
        cy.visit(FULL_LOGIN_ROUTER)
        checkTextExist(LOGIN_PAGE_USERNAME_LABEL)
        checkTextExist(LOGIN_PAGE_PASSWORD_LABEL)
        checkTextExist(LOGIN_PAGE_LOGIN_BUTTON_LABEL)
        getComponentExistByDataTestId(LOGIN_PAGE_USERNAME_DATA_TEST_ID)
        getComponentExistByDataTestId(LOGIN_PAGE_PASSWORD_DATA_TEST_ID)
        getComponentExistByDataTestId(LOGIN_PAGE_LOGIN_BUTTON_DATA_TEST_ID)
    })

    it('should have the form validation for the login page.', () => {
        cy.visit(FULL_LOGIN_ROUTER)

        // login input tag
        getComponentExistByDataTestId(LOGIN_PAGE_USERNAME_DATA_TEST_ID)
            .clear()
            .type(LOGIN_PAGE_LESS_THAN_MIN_NUMBER_CHARACTERS_USERNAME)
            .blur()
        checkTextExist(LOGIN_PAGE_USERNAME_MUST_HAVE_MORE_THAN_MIN_NUMBER_CHARACTERS_ERROR_MESSAGE)

        getComponentExistByDataTestId(LOGIN_PAGE_USERNAME_DATA_TEST_ID)
            .clear()
            .type(LOGIN_PAGE_MORE_THAN_MAX_NUMBER_CHARACTERS_USERNAME)
            .blur()
        checkTextExist(LOGIN_PAGE_USERNAME_MUST_HAVE_LESS_THAN_MAX_NUMBER_CHARACTERS_ERROR_MESSAGE)

        getComponentExistByDataTestId(LOGIN_PAGE_USERNAME_DATA_TEST_ID)
            .clear()
            .type(LOGIN_PAGE_HAVE_SPACE_CHARACTER_USERNAME)
            .blur()
        checkTextExist(LOGIN_PAGE_USERNAME_MUST_HAVE_NO_SPACE_OR_CHARACTER_ERROR_MESSAGE)

        getComponentExistByDataTestId(LOGIN_PAGE_USERNAME_DATA_TEST_ID)
            .clear()
            .type(LOGIN_PAGE_HAVE_SPECIAL_CHARACTER_USERNAME)
            .blur()
        checkTextExist(LOGIN_PAGE_USERNAME_MUST_HAVE_NO_SPACE_OR_CHARACTER_ERROR_MESSAGE)

        // password input tag
        getComponentExistByDataTestId(LOGIN_PAGE_PASSWORD_DATA_TEST_ID)
            .clear()
            .type(LOGIN_PAGE_LESS_THAN_MIN_NUMBER_CHARACTERS_PASSWORD)
            .blur()
        checkTextExist(LOGIN_PAGE_PASSWORD_MUST_HAVE_MORE_THAN_MIN_NUMBER_CHARACTERS_ERROR_MESSAGE)

        getComponentExistByDataTestId(LOGIN_PAGE_PASSWORD_DATA_TEST_ID)
            .clear()
            .type(LOGIN_PAGE_MORE_THAN_MAX_NUMBER_CHARACTERS_PASSWORD)
            .blur()
        checkTextExist(LOGIN_PAGE_PASSWORD_MUST_HAVE_LESS_THAN_MAX_NUMBER_CHARACTERS_ERROR_MESSAGE)
    })
})